/*
    Идет как дополнительный инструменты
    своеобразная мидлвара для любых запросов
*/


// redux
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/dist/query/react";
import type {
    BaseQueryFn,
    FetchArgs,
    FetchBaseQueryError,
} from '@reduxjs/toolkit/query'
import { authReducer } from 'store/auth/auth.slice'
import { store } from "store/store";
import { logout, refresh } from 'store/auth/auth.actions'
// import { useStore } from "react-redux";
// import type { RootState } from 'store/store'
// interfaces
import { 
    IRegistrationRequest, 
    IRegistrationResponse, 
    ILoginRequest, 
    ILoginResponse,
    ILogoutRequest,
    ILogoutResponse
} from 'interfaces/IAuth'
import { IResponseError } from 'interfaces/IGlobal'
// antd
import { message as popUpMessage} from 'antd'



const baseQuery = fetchBaseQuery({
    baseUrl: `${process.env.REACT_APP_SERVER_URL}/api/auth`,
    prepareHeaders: (headers, { getState }) => {
            // Если реализовывать хранение токенов в store Redux а не в куках, 
            // можно получить тут доступ к state через getState
                // const token = (getState() as RootState).auth.token
                // if (token) {
                //   headers.set('authorization', `Bearer ${token}`)
                // }
        headers.set('Content-Type', `application/json;charset=utf-8`)
        return headers
    },
    credentials: 'include',
})

const baseQueryWithReauth: BaseQueryFn<
  string | FetchArgs,
  unknown,
  FetchBaseQueryError
> = async (args, api, extraOptions) => {
    let result = await baseQuery(args, api, extraOptions)

    if (result.error && result.error.status === 401) {
        const refreshResult = await store.dispatch(refresh(''))
        console.log('refreshResult', refreshResult)
        // const refreshResult = await baseQuery('refresh', api, extraOptions)
        if (refreshResult) {
            result = await baseQuery(args, api, extraOptions)
        } else {
            console.log('LOGOUT')
            store.dispatch(logout(''))
        }
    }

  return result
}


/**
 * reducerPath - место в редаксе, где будут храниться все закешированные данные
 * baseQuery - все параметры запроса (своеобразный посредник для запросов)
 */
export const authApi = createApi({
    reducerPath: 'auth/api',
    baseQuery: baseQueryWithReauth,
    endpoints: build => ({
        // build.query - для запроса данных
        // build.mutation - для изменения данных
        // IRegistrationResponse - что хотим получить
        // IRegistrationRequest - что хотим отправить
        registration: build.query<IRegistrationResponse, IRegistrationRequest>({
            query: (data: IRegistrationRequest) => ({
                url: 'registration',
                method: 'POST',
                body: data
            }),
            // transformResponse - какие-то действия с полученными данными
            transformResponse: (response: IRegistrationResponse) => {
                popUpMessage.success(response.message)  
                return response
            },
            transformErrorResponse: (error: { status: string | number }, meta, args) => {
                popUpMessage.error(error.status)
                return error
            }
        }),
        // login: build.query<ILoginResponse, ILoginRequest>({
        //     query: (data: ILoginRequest) => ({
        //         url: 'login',
        //         method: 'POST',
        //         body: data
        //     }),
        //     // transformResponse - какие-то действия с полученными данными
        //     transformResponse: (response: ILoginResponse) => {
        //         popUpMessage.success(response.message)
        //         return response
        //     },
        //     transformErrorResponse: (response: { status: number, data: IResponseError }) => {
        //         popUpMessage.error(response.data.message)
        //         return response
        //     },

        // }),
        // logout: build.query<ILogoutResponse, ILogoutRequest>({
        //     query: (data: ILogoutRequest) => ({
        //         url: 'logout',
        //         method: 'POST',
        //         body: data
        //     }),
        //     // transformResponse - какие-то действия с полученными данными
        //     transformResponse: (response: ILogoutResponse) => {
        //         return response
        //     },
        //     transformErrorResponse: (response: { status: number, data: IResponseError }) => {
        //         return response
        //     },
        // }),
    })
})

// useRegistrationQuery - автосгенирированный хук используемый при загрузке компонента
// useLazyRegistrationQuery - хук для исользования по необходимости

export const { 
    // useLazyRegistrationQuery, 
    // useRegistrationQuery,
    // useLazyLoginQuery,
    // useLoginQuery,
    // useLazyLogoutQuery,
    // useLogoutQuery,
} = authApi